{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\"; // Backend URL\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// ✅ Request Interceptor - Adds Authorization Token\napi.interceptors.request.use(async config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// ✅ Response Interceptor - Handles Token Expiry and Refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // Check if the error is 401 (Unauthorized) and not already retried\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n      if (!refreshToken) throw new Error(\"No refresh token available\");\n\n      // Call Refresh Token API\n      const res = await axios.post(`${API_URL}/users/refresh-token`, {\n        refreshToken\n      });\n\n      // Store new tokens in localStorage\n      localStorage.setItem(\"token\", res.data.token);\n      localStorage.setItem(\"refreshToken\", res.data.refreshToken);\n\n      // Retry the failed request with new token\n      originalRequest.headers[\"Authorization\"] = `Bearer ${res.data.token}`;\n      return api(originalRequest);\n    } catch (err) {\n      console.error(\"Refresh Token Failed:\", err);\n      localStorage.clear();\n      window.location.href = \"/login\"; // Redirect to login if refresh fails\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","Error","res","post","setItem","data","err","console","clear","window","location","href"],"sources":["C:/Users/hp/Downloads/Ecom/Front/src/Componet/auth/UserProfile.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\"; // Backend URL\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// ✅ Request Interceptor - Adds Authorization Token\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// ✅ Response Interceptor - Handles Token Expiry and Refresh\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // Check if the error is 401 (Unauthorized) and not already retried\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      try {\r\n        const refreshToken = localStorage.getItem(\"refreshToken\");\r\n        \r\n        if (!refreshToken) throw new Error(\"No refresh token available\");\r\n\r\n        // Call Refresh Token API\r\n        const res = await axios.post(`${API_URL}/users/refresh-token`, {\r\n          refreshToken,\r\n        });\r\n\r\n        // Store new tokens in localStorage\r\n        localStorage.setItem(\"token\", res.data.token);\r\n        localStorage.setItem(\"refreshToken\", res.data.refreshToken);\r\n\r\n        // Retry the failed request with new token\r\n        originalRequest.headers[\"Authorization\"] = `Bearer ${res.data.token}`;\r\n        return api(originalRequest);\r\n      } catch (err) {\r\n        console.error(\"Refresh Token Failed:\", err);\r\n        localStorage.clear();\r\n        window.location.href = \"/login\"; // Redirect to login if refresh fails\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1B,MAAOC,MAAM,IAAK;EAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,MAAMC,eAAe,GAAGL,KAAK,CAACJ,MAAM;;EAEpC;EACA,IAAI,EAAAQ,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACF,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAEzD,IAAI,CAACS,YAAY,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;;MAEhE;MACA,MAAMC,GAAG,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAAC,GAAGvB,OAAO,sBAAsB,EAAE;QAC7DoB;MACF,CAAC,CAAC;;MAEF;MACAV,YAAY,CAACc,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACG,IAAI,CAAChB,KAAK,CAAC;MAC7CC,YAAY,CAACc,OAAO,CAAC,cAAc,EAAEF,GAAG,CAACG,IAAI,CAACL,YAAY,CAAC;;MAE3D;MACAH,eAAe,CAACb,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUkB,GAAG,CAACG,IAAI,CAAChB,KAAK,EAAE;MACrE,OAAOR,GAAG,CAACgB,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZC,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEc,GAAG,CAAC;MAC3ChB,YAAY,CAACkB,KAAK,CAAC,CAAC;MACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;IACnC;EACF;EACA,OAAOlB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}